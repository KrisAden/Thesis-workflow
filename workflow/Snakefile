# workflow/Snakefile
import os, sys
from pathlib import Path
from snakemake.shell import shell

ROOT = Path.cwd()
SRC  = ROOT / "src"
PYTHON = sys.executable
CFG = ROOT / "config/config.yaml"

# OS-aware runner; pass module name per rule
if os.name == "nt":
    shell.executable("powershell")
    RUN = lambda module: f'& "{PYTHON}" -m {module} --config "{CFG}"'
else:
    shell.executable("/bin/bash")
    RUN = lambda module: f'PYTHONPATH="{SRC}" "{PYTHON}" -m {module} --config "{CFG}"'

# Load config (for base_network path)
with open(CFG) as _f:
    _cfg = yaml.safe_load(_f)

BASE_IN  = _cfg["paths"]["base_network"]
BASE_OUT = "data/raw/elec_s_37.nc"

rule all:
    input:
        BASE_OUT,
        "results/networks/try_base_full.nc",
        "results/tables/try_base_full.csv"

rule import_base:
    input:
        BASE_IN
    output:
        BASE_OUT
    shell:
        # Cross-OS copy
        'Copy-Item -Path {input} -Destination {output} -Force' if os.name == "nt" \
        else 'mkdir -p $(dirname {output}) && cp {input} {output}'

rule try_optimize_base:
    input:
        BASE_OUT
    output:
        net="results/networks/try_base_full.nc",
        report="results/tables/try_base_full.csv"
    params:
        # tweak or remove load-shedding as you like; no --snapshots flag => full horizon
        extra="--add-load-shedding --load-shedding-cost 1e6"
    shell:
        RUN('pypsa_thesis.try_solve '
            '--network-in {input} '
            '--network-out {output.net} '
            '--report-out {output.report} '
            '{params.extra}')